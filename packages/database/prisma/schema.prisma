// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

enum ReviewStatus {
  PENDING @map("pending")
  PUBLIC  @map("public")
  HIDDEN  @map("hidden")
}

enum WidgetType {
  GRID     @map("grid")
  LIST     @map("list")
  CAROUSEL @map("carousel")
  MASONRY  @map("masonry")
}

enum MediaType {
  IMAGE @map("image")
  VIDEO @map("video")
  AUDIO @map("audio")
}

model User {
  id                String      @id @default(uuid())
  provider          String
  providerAccountId String
  name              String?
  email             String?
  image             String? // Store profile image URL
  roles             String[]    @default([]) // Example: for user roles
  idToken           String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  lastLogin         DateTime?
  Workspace         Workspace[]
  Form              Form[]
  Widget            Widget[]

  @@unique([provider, providerAccountId])
}

model Workspace {
  id        String   @id @default(uuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User     @relation(fields: [userId], references: [id])
  Form   Form[]
  Widget Widget[]
  Review Review[]
}

model Form {
  id          String    @id @default(uuid())
  userId      String
  workspaceId String
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  Review Review[]
}

model Review {
  id            String        @id @default(uuid())
  workspaceId   String
  formId        String?
  reviewerName  String
  reviewerImage String?
  reviewerEmail String?
  rating        Int?
  text          String?
  twitterUrl    String?
  status        ReviewStatus  @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  form          Form?         @relation(fields: [formId], references: [id])
  workspace     Workspace     @relation(fields: [workspaceId], references: [id])
  medias        ReviewMedia[]
}

model ReviewMedia {
  id        String    @id @default(uuid())
  reviewId  String?
  url       String
  thumbnail String?
  type      MediaType @default(IMAGE)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Review    Review?   @relation(fields: [reviewId], references: [id])
}

model Widget {
  id          String     @id @default(uuid())
  userId      String
  workspaceId String
  name        String
  type        WidgetType @default(GRID)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id])
  workspace   Workspace  @relation(fields: [workspaceId], references: [id])
}
